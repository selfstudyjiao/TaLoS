#ifndef ENCLAVE_T_H__
#define ENCLAVE_T_H__

#include <stdint.h>
#include <wchar.h>
#include <stddef.h>
#include "sgx_edger8r.h" /* for sgx_ocall etc. */

#include "openssl/ossl_typ.h"
#include "openssl_types.h"

#include <stdlib.h> /* for size_t */

#define SGX_CAST(type, item) ((type)(item))

#ifdef __cplusplus
extern "C" {
#endif


int ecall_SSL_read(SSL* ssl, void* buf, int num);
void ecall_OPENSSL_config(const char* config_name);
int ecall_SSL_library_init();
void ecall_SSL_load_error_strings();
void ecall_OPENSSL_add_all_algorithms_noconf();
int ecall_SSL_get_ex_new_index(long int argl, void* argp, CRYPTO_EX_new* new_func, CRYPTO_EX_dup* dup_func, CRYPTO_EX_free* free_func);
int ecall_SSL_CTX_get_ex_new_index(long int argl, void* argp, CRYPTO_EX_new* new_func, CRYPTO_EX_dup* dup_func, CRYPTO_EX_free* free_func);
int ecall_X509_get_ex_new_index(long int argl, void* argp, CRYPTO_EX_new* new_func, CRYPTO_EX_dup* dup_func, CRYPTO_EX_free* free_func);
SSL_METHOD* ecall_SSLv23_method();
SSL_CTX* ecall_SSL_CTX_new(const SSL_METHOD* meth);
int ecall_SSL_CTX_set_ex_data(SSL_CTX* ssl, int idx, void* data);
long int ecall_SSL_CTX_ctrl(SSL_CTX* ctx, int cmd, long int larg, void* parg);
void ecall_SSL_CTX_set_info_callback(SSL_CTX* ctx, void* cb);
long int ecall_SSL_CTX_callback_ctrl(SSL_CTX* c, int i, void* cb);
void ecall_SSL_CTX_set_alpn_select_cb(SSL_CTX* ctx, void* cb, void* arg);
void ecall_SSL_CTX_set_next_protos_advertised_cb(SSL_CTX* s, void* cb, void* arg);
BIO* ecall_BIO_new_file(const char* filename, const char* mode, int* method_in_enclave);
X509* ecall_PEM_read_bio_X509_AUX(BIO* bp, X509** x, void* cb, void* u);
int ecall_SSL_CTX_use_certificate(SSL_CTX* ctx, X509* x);
void* ecall_SSL_CTX_get_ex_data(const SSL_CTX* ssl, int idx);
int ecall_X509_set_ex_data(X509* r, int idx, void* arg);
X509* ecall_PEM_read_bio_X509(BIO* bp, X509** x, void* cb, void* u);
unsigned long int ecall_ERR_peek_last_error();
unsigned long int ecall_ERR_peek_error();
unsigned long int ecall_ERR_peek_error_line_data(const char** file, int* line, const char** data, int* flags);
unsigned long int ecall_ERR_get_error();
void ecall_ERR_clear_error();
void ecall_ERR_error_string_n(unsigned long int e, char* buf, size_t len);
int ecall_BIO_free(BIO* a);
int ecall_SSL_CTX_use_PrivateKey_file(SSL_CTX* ctx, const char* file, int type);
void ecall_SSL_CTX_set_default_passwd_cb(SSL_CTX* ctx, void* cb);
int ecall_SSL_CTX_set_cipher_list(SSL_CTX* ctx, const char* str);
void ecall_SSL_CTX_set_verify_depth(SSL_CTX* ctx, int depth);
int ecall_OBJ_sn2nid(const char* s);
EC_KEY* ecall_EC_KEY_new_by_curve_name(int nid);
void ecall_EC_KEY_free(EC_KEY* key);
long int ecall_SSL_CTX_set_timeout(SSL_CTX* ctx, long int t);
EVP_MD_CTX* ecall_EVP_MD_CTX_create();
EVP_MD* ecall_EVP_sha1();
int ecall_EVP_DigestInit_ex(EVP_MD_CTX* ctx, const EVP_MD* type, ENGINE* impl);
int ecall_EVP_DigestUpdate(EVP_MD_CTX* ctx, const void* d, size_t cnt);
int ecall_X509_digest(const X509* data, const EVP_MD* type, unsigned char* md, unsigned int* len);
void* ecall_X509_get_ex_data(X509* r, int idx);
void* ecall_SSL_CTX_get_client_CA_list(const SSL_CTX* s);
int ecall_sk_num(const void* s);
int ecall_EVP_DigestFinal_ex(EVP_MD_CTX* ctx, unsigned char* md, unsigned int* s);
void ecall_EVP_MD_CTX_destroy(EVP_MD_CTX* ctx);
int ecall_SSL_CTX_set_session_id_context(SSL_CTX* ctx, const unsigned char* sid_ctx, unsigned int sid_ctx_len);
void ecall_SSL_CTX_sess_set_new_cb(SSL_CTX* ctx, void* new_session_cb);
void ecall_SSL_CTX_sess_set_get_cb(SSL_CTX* ctx, void* get_session_cb);
void ecall_SSL_CTX_sess_set_remove_cb(SSL_CTX* ctx, void* remove_session_cb);
SSL* ecall_SSL_new(SSL_CTX* ctx, SSL* out_s);
int ecall_SSL_set_fd(SSL* s, int fd);
void ecall_SSL_set_accept_state(SSL* s);
int ecall_SSL_do_handshake(SSL* s);
int ecall_SSL_get_error(const SSL* s, int ret_code);
BIO* ecall_SSL_get_rbio(const SSL* s);
BIO* ecall_SSL_get_wbio(const SSL* s);
long int ecall_BIO_int_ctrl(BIO* bp, int cmd, long int larg, int iarg);
int ecall_SSL_state(const SSL* ssl);
SSL_CIPHER* ecall_SSL_get_current_cipher(const SSL* s);
char* ecall_SSL_CIPHER_description(const SSL_CIPHER* c, char* buf, int size);
int ecall_SSL_get_version_as_int(const SSL* s);
long int ecall_SSL_ctrl(SSL* ssl, int cmd, long int larg, void* parg);
int ecall_SSL_write(SSL* ssl, const void* buf, int num);
int ecall_SSL_get_shutdown(const SSL* ssl);
void ecall_SSL_set_quiet_shutdown(SSL* ssl, int mode);
void ecall_SSL_set_shutdown(SSL* ssl, int mode);
void ecall_SSL_free(SSL* ssl);
int ecall_SSL_shutdown(SSL* s);
void ecall_SSL_get_servername(const SSL* s, int type, char* servername, int* len);
int ecall_i2d_SSL_SESSION(void* in, unsigned char** pp);
void* ecall_d2i_SSL_SESSION(void** a, const unsigned char** pp, long int length);
void ecall_SSL_SESSION_get_id(void* s, unsigned char* buf, unsigned int* len);
long int ecall_SSL_CTX_get_timeout(SSL_CTX* ctx);
int ecall_MD5_Init(MD5_CTX* c);
int ecall_MD5_Update(MD5_CTX* c, const void* data, size_t len);
int ecall_MD5_Final(unsigned char* md, MD5_CTX* c);
void ecall_SSL_CTX_free(SSL_CTX* c);
EVP_MD* ecall_EVP_get_digestbyname(const char* name);
SSL_METHOD* ecall_SSLv23_client_method();
void* ecall_sk_new_null();
BIO_METHOD* ecall_BIO_s_file();
BIO* ecall_BIO_new(BIO_METHOD* type, BIO* ret);
long int ecall_BIO_ctrl(BIO* bp, int cmd, long int larg, void* parg);
void ecall_SSL_CTX_set_tmp_rsa_callback(SSL_CTX* ctx, void* cb);
void ecall_SSL_CTX_set_verify(SSL_CTX* ctx, int mode, void* callback);
int ecall_X509_check_issued(X509* issuer, X509* subject);
void ecall_X509_free(X509* a);
int ecall_SSL_CTX_set_default_verify_paths(SSL_CTX* ctx);
void ecall_SSL_CTX_set_next_proto_select_cb(SSL_CTX* ctx, void* cb, void* arg);
void ecall_SSL_CTX_set_cert_verify_callback(SSL_CTX* ctx, void* cb, void* arg);
EVP_PKEY* ecall_PEM_read_bio_PrivateKey(BIO* bp, EVP_PKEY** x, void* cb, void* u);
int ecall_X509_check_private_key(X509* x, EVP_PKEY* k);
void ecall_EVP_PKEY_free(EVP_PKEY* pkey);
X509* ecall_X509_new();
X509_NAME* ecall_X509_get_subject_name(X509* a);
int ecall_X509_pubkey_digest(const X509* data, const EVP_MD* type, unsigned char* md, unsigned int* len);
int ecall_X509_NAME_get_text_by_NID(X509_NAME* name, int nid, char* buf, int len);
int ecall_CRYPTO_add_lock(int* pointer, int amount, int type, const char* file, int line);
BIGNUM* ecall_BN_new();
int ecall_BN_set_word(BIGNUM* a, BN_ULONG w);
int ecall_X509_set_pubkey(X509* x, EVP_PKEY* pkey);
int ecall_BN_is_zero(BIGNUM* a);
void ecall_BN_free(BIGNUM* a);
ASN1_INTEGER* ecall_X509_get_serialNumber(X509* x);
BIGNUM* ecall_BN_dup(const BIGNUM* a);
ASN1_INTEGER* ecall_BN_to_ASN1_INTEGER(const BIGNUM* bn, ASN1_INTEGER* ai);
int ecall_X509_set_subject_name(X509* x, X509_NAME* name);
int ecall_X509_NAME_get_index_by_NID(X509_NAME* name, int nid, int lastpos);
X509_NAME_ENTRY* ecall_X509_NAME_get_entry(X509_NAME* name, int loc);
X509_NAME_ENTRY* ecall_X509_NAME_delete_entry(X509_NAME* name, int loc);
void ecall_X509_NAME_ENTRY_free(X509_NAME_ENTRY* a);
int ecall_X509_NAME_add_entry_by_NID(X509_NAME* name, int nid, int type, unsigned char* bytes, int len, int loc, int set);
ASN1_TIME* ecall_X509_get_notBefore(X509* x);
ASN1_TIME* ecall_X509_get_notAfter(X509* x);
int ecall_X509_set_notBefore(X509* x, const ASN1_TIME* tm);
int ecall_X509_set_notAfter(X509* x, const ASN1_TIME* tm);
ASN1_OBJECT* ecall_X509_get_cert_key_algor_algorithm(X509* x);
unsigned char* ecall_X509_alias_get0(X509* x, int* len);
int ecall_OBJ_obj2nid(const ASN1_OBJECT* a);
int ecall_X509_get_ext_by_NID(X509* x, int nid, int lastpos);
X509_EXTENSION* ecall_X509_get_ext(X509* x, int loc);
int ecall_X509_set_issuer_name(X509* x, X509_NAME* name);
int ecall_X509_sign(X509* x, EVP_PKEY* pkey, const EVP_MD* md);
BIGNUM* ecall_BN_bin2bn(const unsigned char* s, int len, BIGNUM* ret);
int ecall_BN_num_bits(const BIGNUM* a);
int ecall_BN_is_bit_set(const BIGNUM* a, int n);
SSL_METHOD* ecall_SSLv23_server_method();
int ecall_SSL_CTX_use_PrivateKey(SSL_CTX* ctx, EVP_PKEY* pkey);
char* ecall_ERR_error_string(unsigned long int e, char* ret);
void ecall_SSL_set_info_callback(SSL* ssl, void* cb);
ASN1_OBJECT* ecall_X509_get_algorithm(X509* ptr);
SSL_CIPHER* ecall_ssl3_get_cipher_name_by_char(const unsigned char* p, char* cipher_name);
int ecall_SSL_set_cipher_list(SSL* s, const char* str);
int ecall_SSL_connect(SSL* s);
char* ecall_X509_NAME_oneline(X509_NAME* a, char* buf, int size);
int ecall_EVP_MD_type(const EVP_MD* md);
char* ecall_OBJ_nid2sn(int n);
int ecall_PEM_ASN1_write(i2d_of_void* i2d, const char* name, void* fp, void* x, const EVP_CIPHER* enc, unsigned char* kstr, int klen, pem_password_cb* callback, void* u);
ASN1_STRING* ecall_X509_NAME_ENTRY_get_data(X509_NAME_ENTRY* ne);
void* ecall_sk_value(const void* s, int v);
int ecall_SSL_pending(const SSL* s);
int ecall_X509_add_ext(X509* x, X509_EXTENSION* ex, int loc);
int ecall_X509_set_version(X509* x, long int version);
struct stack_st_SSL_CIPHER* ecall_SSL_get_ciphers(const SSL* s);
char* ecall_SSL_CIPHER_get_name(const SSL_CIPHER* c);
char* ecall_SSL_state_string_long(const SSL* s);
int ecall_SSL_use_certificate(SSL* ssl, X509* x);
int ecall_SSL_use_PrivateKey(SSL* ssl, EVP_PKEY* pkey);
void ecall_sk_pop_free(void* st, void* cb);
void ecall_GENERAL_NAME_free(GENERAL_NAME* a);
long int ecall_SSL_SESSION_set_timeout(SSL_SESSION* session, long int t);
int ecall_BN_clear_bit(BIGNUM* a, int n);
int ecall_SSL_select_next_proto(unsigned char** out, unsigned char* outlen, const unsigned char* in, unsigned int inlen, const unsigned char* client, unsigned int client_len);
int ecall_SSL_set_alpn_protos(SSL* ssl, const unsigned char* protos, unsigned int protos_len);
char* ecall_SSLeay_version(int type);
void ecall_ERR_load_crypto_strings();
void ecall_OPENSSL_load_builtin_modules();
int ecall_OBJ_txt2nid(const char* s);
int ecall_OBJ_create(const char* oid, const char* sn, const char* ln);
X509_STORE* ecall_SSL_CTX_get_cert_store(const SSL_CTX* c);
int ecall_SSL_CTX_use_certificate_chain_file(SSL_CTX* ctx, const char* file);
int ecall_SSL_CTX_check_private_key(const SSL_CTX* ctx);
void ecall_SSL_set_connect_state(SSL* s);
X509* ecall_SSL_get_certificate(const SSL* ssl);
void* ecall_X509_get_ext_d2i(X509* x, int nid, int* crit, int* idx);
void ecall_EC_GROUP_free(EC_GROUP* group);
DH* ecall_DH_new();
int ecall_SSL_set_session_id_context(SSL* ssl, const unsigned char* sid_ctx, unsigned int sid_ctx_len);
BIGNUM* ecall_ASN1_INTEGER_to_BN(const ASN1_INTEGER* ai, BIGNUM* bn);
void ecall_BASIC_CONSTRAINTS_free(BASIC_CONSTRAINTS* a);
void ecall_DH_free(DH* dh);
void ecall_SSL_set_verify_result(SSL* ssl, long int arg);
void ecall_SSL_set_bio(SSL* s, BIO* rbio, BIO* wbio);
int ecall_SSL_accept(SSL* s);
void ecall_CRYPTO_set_id_callback(void* func);
void ecall_CRYPTO_set_locking_callback(void* func);
void ecall_CRYPTO_set_dynlock_create_callback(void* func);
void ecall_CRYPTO_set_dynlock_lock_callback(void* func);
void ecall_CRYPTO_set_dynlock_destroy_callback(void* func);
void ecall_SSL_CTX_set_tmp_dh_callback(SSL_CTX* ctx, void* dh);
ASN1_INTEGER* ecall_X509_BC_get_pathlen(BASIC_CONSTRAINTS* bc);
DH* ecall_PEM_read_bio_DHparams(BIO* bp, DH** x, void* cb, void* u);
EC_GROUP* ecall_PEM_read_bio_ECPKParameters(BIO* bp, DH** x, void* cb, void* u);
void ecall_CONF_modules_unload(int all);
void ecall_EVP_cleanup();
void ecall_ERR_remove_state(unsigned long int pid);
void ecall_ERR_free_strings();
long int ecall_SSL_get_verify_result(const SSL* ssl);
X509* ecall_SSL_get_peer_certificate(const SSL* s);
SSL_CTX* ecall_SSL_get_SSL_CTX(const SSL* ssl);
int ecall_SSL_get_verify_mode(const SSL* s);
void ecall_SSL_set_verify(SSL* s, int mode, void* cb);
SSL_CTX* ecall_SSL_set_SSL_CTX(SSL* ssl, SSL_CTX* ctx);
int ecall_SSL_CTX_get_verify_mode(const SSL_CTX* ctx);
void* ecall_SSL_CTX_get_verify_callback(const SSL_CTX* ctx);
int ecall_BN_dec2bn(BIGNUM** bn, const char* a);
char* ecall_ENGINE_get_name(const ENGINE* e);
char* ecall_ENGINE_get_id(const ENGINE* e);
void ecall_SSL_get_privatekey(EVP_PKEY* pkey, SSL* s);
int ecall_EVP_PKEY_type(int type);
int ecall_EVP_PKEY_bits(EVP_PKEY* pkey);
void ecall_ENGINE_load_builtin_engines();
int ecall_SSL_CTX_use_certificate_file(SSL_CTX* ctx, const char* file, int type);
void ecall_start_sgx_thread(void* eq, void* oq, int tid, int appthreads, int sgxthreads, int lthread_tasks, int ncycles, uint64_t* rdtsc_value);
void ecall_tls_processing_module_init();

sgx_status_t SGX_CDECL ocall_print_string(const char* str);
sgx_status_t SGX_CDECL ocall_println_string(const char* str);
sgx_status_t SGX_CDECL ocall_fsync(int* retval, int fd);
sgx_status_t SGX_CDECL ocall_ftruncate(int* retval, int fd, off_t length);
sgx_status_t SGX_CDECL ocall_unlink(int* retval, const char* str);
sgx_status_t SGX_CDECL ocall_lseek(off_t* retval, int fd, off_t offset, int whence);
sgx_status_t SGX_CDECL ocall_lstat(int* retval, const char* pathname, struct stat* buf, size_t size);
sgx_status_t SGX_CDECL ocall_fstat(int* retval, int fd, struct stat* buf, size_t size);
sgx_status_t SGX_CDECL ocall_stat(int* retval, const char* path, struct stat* buf, size_t size);
sgx_status_t SGX_CDECL ocall_fcntl(int* retval, int fd, int cmd, void* arg, size_t size);
sgx_status_t SGX_CDECL ocall_getcwd(char** retval, char* buf, size_t size);
sgx_status_t SGX_CDECL ocall_exit(int s);
sgx_status_t SGX_CDECL ocall_malloc(void** retval, size_t size);
sgx_status_t SGX_CDECL ocall_mmap(void** retval, void* addr, size_t length, int prot, int flags, int fd, off_t offset);
sgx_status_t SGX_CDECL ocall_realloc(void** retval, void* ptr, size_t size);
sgx_status_t SGX_CDECL ocall_free(void* ptr);
sgx_status_t SGX_CDECL ocall_fopen(void** retval, const char* path, const char* mode);
sgx_status_t SGX_CDECL ocall_fwrite_copy(size_t* retval, const void* ptr, size_t size, size_t nmemb, void* stream);
sgx_status_t SGX_CDECL ocall_fwrite(size_t* retval, const void* ptr, size_t size, size_t nmemb, void* stream);
sgx_status_t SGX_CDECL ocall_fflush(int* retval, void* stream);
sgx_status_t SGX_CDECL ocall_fclose(int* retval, void* fp);
sgx_status_t SGX_CDECL ocall_close(int* retval, int fd);
sgx_status_t SGX_CDECL ocall_fgets(char** retval, char* s, int size, void* stream);
sgx_status_t SGX_CDECL ocall_get_cpuid_for_openssl(unsigned long long* retval);
sgx_status_t SGX_CDECL ocall_open(int* retval, const char* filename, int flags, mode_t mode);
sgx_status_t SGX_CDECL ocall_open64(int* retval, const char* filename, int flags, mode_t mode);
sgx_status_t SGX_CDECL ocall_read(int* retval, int fd, void* buf, size_t count);
sgx_status_t SGX_CDECL ocall_write(int* retval, int fd, const void* buf, size_t count);
sgx_status_t SGX_CDECL ocall_getpid(int* retval);
sgx_status_t SGX_CDECL ocall_getuid(int* retval);
sgx_status_t SGX_CDECL ocall_time(long int* retval, long int* t);
sgx_status_t SGX_CDECL ocall_calloc(void** retval, size_t nmemb, size_t size);
sgx_status_t SGX_CDECL ocall__getpagesize(int* retval);
sgx_status_t SGX_CDECL ocall_gettimeofday(int* retval, struct timeval* tv, struct timezone* tz);
sgx_status_t SGX_CDECL ocall_sgx_thread_sleep();
sgx_status_t SGX_CDECL ocall_sgx_thread_wake_up();
sgx_status_t SGX_CDECL ocall_nanosleep(unsigned long int sec, unsigned long int nanosec);
sgx_status_t SGX_CDECL ocall_execute_ssl_ctx_info_callback(const SSL* ssl, int type, int val, void* cb);
sgx_status_t SGX_CDECL ocall_alpn_select_cb(int* retval, SSL* s, unsigned char** out, unsigned char* outlen, const unsigned char* in, unsigned int inlen, void* arg, void* cb);
sgx_status_t SGX_CDECL ocall_next_protos_advertised_cb(int* retval, SSL* s, unsigned char** buf, unsigned int* len, void* arg, void* cb);
sgx_status_t SGX_CDECL ocall_pem_password_cb(int* retval, char* buf, int size, int rwflag, void* userdata, void* cb);
sgx_status_t SGX_CDECL ocall_new_session_callback(int* retval, struct ssl_st* ssl, void* sess, void* cb);
sgx_status_t SGX_CDECL ocall_remove_session_cb(SSL_CTX* ctx, void* sess, void* cb);
sgx_status_t SGX_CDECL ocall_get_session_cb(void** retval, struct ssl_st* ssl, unsigned char* data, int len, int* copy, void* cb);
sgx_status_t SGX_CDECL ocall_ssl_ctx_callback_ctrl(int* retval, SSL* ssl, int* ad, void* arg, void* cb);
sgx_status_t SGX_CDECL ocall_crypto_set_locking_cb(void* cb, int mode, int type, const char* file, int line);
sgx_status_t SGX_CDECL ocall_crypto_set_id_cb(unsigned long int* retval, void* cb);
sgx_status_t SGX_CDECL ocall_bio_create(int* retval, BIO* b, void* cb);
sgx_status_t SGX_CDECL ocall_bio_destroy(int* retval, BIO* b, void* cb);
sgx_status_t SGX_CDECL ocall_bio_read(int* retval, BIO* b, char* buf, int len, void* cb);
sgx_status_t SGX_CDECL ocall_bio_write(int* retval, BIO* b, char* buf, int len, void* cb);
sgx_status_t SGX_CDECL ocall_bio_ctrl(long int* retval, BIO* b, int cmd, long int argl, void* arg, void* cb);
sgx_status_t SGX_CDECL ocall_SSL_CTX_set_tmp_dh_cb(DH** retval, SSL* ssl, int is_export, int keylength, void* cb);
sgx_status_t SGX_CDECL ocall_crypto_ex_free_cb(void* parent, void* ptr, CRYPTO_EX_DATA* ad, int idx, long int argl, void* argp, void* cb);
sgx_status_t SGX_CDECL ocall_sk_pop_free_cb(void* data, void* cb);
sgx_status_t SGX_CDECL ocall_ssl_ctx_set_next_proto_select_cb(int* retval, SSL* s, unsigned char** out, unsigned char* outlen, const unsigned char* in, unsigned int inlen, void* arg, void* cb);
sgx_status_t SGX_CDECL sgx_oc_cpuidex(int cpuinfo[4], int leaf, int subleaf);
sgx_status_t SGX_CDECL sgx_thread_wait_untrusted_event_ocall(int* retval, const void* self);
sgx_status_t SGX_CDECL sgx_thread_set_untrusted_event_ocall(int* retval, const void* waiter);
sgx_status_t SGX_CDECL sgx_thread_setwait_untrusted_events_ocall(int* retval, const void* waiter, const void* self);
sgx_status_t SGX_CDECL sgx_thread_set_multiple_untrusted_events_ocall(int* retval, const void** waiters, size_t total);

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif
